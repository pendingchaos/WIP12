#ifdef SCRIPT_BINDING_GENERATOR
#define GETTER __attribute__((annotate("getter")))
#define SETTER __attribute__((annotate("setter")))
#define TEMPLATE_TYPES(class, ...) __attribute__((annotate("templatetypes" STR(class) ";" STR(__VA_ARGS__)))) static int JOIN(_, __COUNTER__);
#define BIND __attribute__((annotate("bind")))
#define NO_BIND __attribute__((annotate("nobind")))
#define DOC_ARG(arg, str) __attribute__((annotate("argdoc"arg" "str)))
#define DOC_DESC(str) __attribute__((annotate("descdoc"str)))
#define DOC_EXCEPTION(type, reason) __attribute__((annotate("excdoc"type" "reason)))
#else
#define GETTER
#define SETTER
#define TEMPLATE_TYPES(class, ...)
#define BIND
#define NO_BIND
#define DOC_ARG(arg, str)
#define DOC_DESC(str)
#endif

template <typename T>
class List
{
    public:
        size_t getCount() GETTER
        DOC_DESC("Returns the number of elements in this list.")
        {
            return 0;
        }

        List<T> join(const List<T>& other) const
        DOC_ARG("other", "The list to add.")
        DOC_DESC("Copys this list and appends @other to it.")
        {
            return List<T>()
        }

        List<T> join(T *other) const NO_BIND
        DOC_ARG("other", "The list to add.")
        DOC_DESC("Copys this list and appends @other to it.")
        DOC_EXCEPTION("NullPointer", "Throws a NullPointer exception if @other is null.")
        {
            return List<T>()
        }

        void not_bound() NO_BIND {}
} BIND;

TEMPLATE_TYPES(List, <int>:IntList <float>:FloatList <GfxMaterial>:GfxMaterialList)
