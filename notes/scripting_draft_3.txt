import "some_module"

class vec2
    x: float
    y: float

    method __init__(self, ...args)
        if (args.len == 0)
            self.x = 0.0
            self.y = 0.0
        } elif (args.len == 1)
            try
                self.x = args[0] as float
                self.y = args[0] as float
            except
                throw ValueException("Unable to find overload for vec2::__init__.")
            }
        } elif (args.len == 2)
            try
                self.x = args[0] as float
                self.y = args[1] as float
            except
                throw ValueException("Unable to find overload for vec2::__init__.")
            }
        } else
            throw ValueException("Unable to find overload for vec2::__init__.")
        }
    }
    
    method __add__(self, other: ?) -> vec2
        if (other is vec2)
            other_vec = other as vec2
        
            return vec2(self.x + other.x, self.y + other.y)
        } elif (other is float)
            return vec2(self.x + other as float, self.y + other as float)
        } else
            throw ValueException("Unable to find overload for vec2::__add__.")
        }
    }
}

scope
    variable = 42
}

# Comment

some_module.some_function()

function adder(x: int, x2: int, x3: int, x4: int) -> function
    return function()
        return inc as int + inc2 as int + x3 as int + x4 as int
    } with x->inc, x4, x2->inc2, x3
}

obj = {
    member1 = 5
    member2 = "Hello world!"
}

