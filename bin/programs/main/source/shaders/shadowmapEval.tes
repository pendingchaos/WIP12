#extension GL_ARB_tessellation_shader : require

#include "lib/uniform.glsl"

layout (triangles) in;

in gl_PerVertex
{
    vec4 gl_Position;
} gl_in[];

in vec3 eval_normal_worldSpace[];
in vec2 eval_uv_tangentSpace[];

out gl_PerVertex
{
    vec4 gl_Position;
};

DECLUNIFORM(sampler2D, heightMap)
DECLUNIFORM(mat4, projectionMatrix)
DECLUNIFORM(mat4, viewMatrix)
DECLUNIFORM(float, strength)
DECLUNIFORM(float, displacementMidlevel)

vec2 interpolateVec2(in vec2 v0, in vec2 v1, in vec2 v2)
{
    return   v0 * gl_TessCoord.x
           + v1 * gl_TessCoord.y
           + v2 * gl_TessCoord.z;
}

vec3 interpolateVec3(in vec3 v0, in vec3 v1, in vec3 v2)
{
    return   v0 * gl_TessCoord.x
           + v1 * gl_TessCoord.y
           + v2 * gl_TessCoord.z;
}

vec4 interpolateVec4(in vec4 v0, in vec4 v1, in vec4 v2)
{
    return   v0 * gl_TessCoord.x
           + v1 * gl_TessCoord.y
           + v2 * gl_TessCoord.z;
}

void main()
{
    gl_Position = interpolateVec4(gl_in[0].gl_Position,
                                  gl_in[1].gl_Position,
                                  gl_in[2].gl_Position);

    vec3 normal = interpolateVec3(eval_normal_worldSpace[0],
                                  eval_normal_worldSpace[1],
                                  eval_normal_worldSpace[2]);

    vec2 uv = interpolateVec2(eval_uv_tangentSpace[0],
                              eval_uv_tangentSpace[1],
                              eval_uv_tangentSpace[2]);

    gl_Position.xyz += normal * (texture(U(heightMap), uv).r - U(displacementMidlevel)) * U(strength);

    gl_Position = U(projectionMatrix) * U(viewMatrix) * gl_Position;
}
