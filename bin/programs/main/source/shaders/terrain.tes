layout (quads) in;

in gl_PerVertex
{
    vec4 gl_Position;
} gl_in[];

out gl_PerVertex
{
    vec4 gl_Position;
};

out vec3 frag_position_worldSpace;
out vec2 frag_uv_tangentSpace;
out vec3 frag_normal_worldSpace;
out vec3 frag_viewDir_worldSpace;
out vec3 frag_tangent_worldSpace;
out vec3 frag_bitangent_worldSpace;
out vec2 frag_terruv_tangentSpace;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform float size;
uniform sampler2D heightMap;
uniform float scale;
uniform vec3 cameraPosition;
uniform float uvScale;

void main()
{
    float u = gl_TessCoord.x;    
    float v = gl_TessCoord.y;
    
    vec3 p0 = mix(gl_in[0].gl_Position.xyz, gl_in[3].gl_Position.xyz, u);
    vec3 p1 = mix(gl_in[1].gl_Position.xyz, gl_in[2].gl_Position.xyz, u);
    frag_position_worldSpace = mix(p0, p1, v);
    
    frag_uv_tangentSpace = (frag_position_worldSpace.xz+size/2.0) / size;
    
    float h0 = textureOffset(heightMap, frag_uv_tangentSpace, ivec2(-1, -1)).r;
    float h1 = textureOffset(heightMap, frag_uv_tangentSpace, ivec2(0, -1)).r;
    float h2 = textureOffset(heightMap, frag_uv_tangentSpace, ivec2(1, -1)).r;
    float h3 = textureOffset(heightMap, frag_uv_tangentSpace, ivec2(-1, 0)).r;
    float h4 = textureOffset(heightMap, frag_uv_tangentSpace, ivec2(0, 0)).r;
    float h5 = textureOffset(heightMap, frag_uv_tangentSpace, ivec2(1, 0)).r;
    float h6 = textureOffset(heightMap, frag_uv_tangentSpace, ivec2(-1, 1)).r;
    float h7 = textureOffset(heightMap, frag_uv_tangentSpace, ivec2(0, 1)).r;
    float h8 = textureOffset(heightMap, frag_uv_tangentSpace, ivec2(1, 1)).r;
    
    frag_terruv_tangentSpace = frag_uv_tangentSpace;
    frag_uv_tangentSpace *= uvScale;
    
    /*frag_normal_worldSpace = vec3(-(h2-h0+2.0*(h5-h3)+h8-h6),
                                  1.0,
                                  -(h6-h0+2.0*(h7-h1)+h8-h2));
    frag_normal_worldSpace = normalize(frag_normal_worldSpace);*/
    frag_normal_worldSpace = normalize(cross(vec3(0.0, h4*scale, 0.0)-vec3(0.0, h7*scale, 1.0),
                                             vec3(0.0, h4*scale, 0.0)-vec3(1.0, h5*scale, 0.0)));
    frag_normal_worldSpace += normalize(cross(vec3(0.0, h4*scale, 0.0)-vec3(-1.0, h3*scale, 0.0),
                                              vec3(0.0, h4*scale, 0.0)-vec3(0.0, h7*scale, 1.0)));
    frag_normal_worldSpace += normalize(cross(vec3(0.0, h4*scale, 0.0)-vec3(0.0, h1*scale, -1.0),
                                              vec3(0.0, h4*scale, 0.0)-vec3(-1.0, h3*scale, 0.0)));
    frag_normal_worldSpace += normalize(cross(vec3(0.0, h4*scale, 0.0)-vec3(1.0, h5*scale, 0.0),
                                              vec3(0.0, h4*scale, 0.0)-vec3(0.0, h1*scale, -1.0)));
    frag_normal_worldSpace /= 4.0;
    
    frag_tangent_worldSpace = cross(frag_normal_worldSpace, vec3(0.0, 0.0, 1.0));
    frag_bitangent_worldSpace = normalize(cross(frag_normal_worldSpace,
                                                frag_tangent_worldSpace));
    
    float height = h0 + h1 + h2 + h3 + h4 + h5 + h6 + h7 + h8;
    height /= 9.0;
    frag_position_worldSpace.y += height * scale;
    
    frag_viewDir_worldSpace = normalize(cameraPosition - frag_position_worldSpace);
    
    gl_Position = projectionMatrix * viewMatrix * vec4(frag_position_worldSpace, 1.0);
}
