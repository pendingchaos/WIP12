#include "lib/uniform.glsl"

layout (vertices = 4) out;

in gl_PerVertex
{
    vec4 gl_Position;
} gl_in[];

in vec3 position_worldSpace[];

out gl_PerVertex
{
    vec4 gl_Position;
} gl_out[];

DECLUNIFORM(vec3, cameraPosition)

float remap(in float value,
            in float old_min,
            in float old_max,
            in float new_min,
            in float new_max)
{
    return   (value - old_min) / (old_max - old_min) //Map value from old_min-old_max to 0-1
           * (new_max - new_min) + new_min; //Map value from 0-1 to new_min-new_max
}

const float maxTessLevel = 100.0;
const float minTessLevel = 20.0;
const float tessStartDistance = 100.0;

float getTessLevel(in float distance)
{
    float level = 1.0 - remap(distance, 0.0, tessStartDistance, 0.0, 1.0);    
    
    level = pow(level, 2.0);
    
    return clamp(level, 0.0, 1.0) * (maxTessLevel-minTessLevel) + minTessLevel;
}

void main()
{
    vec3 p0 = position_worldSpace[0];
    vec3 p1 = position_worldSpace[1];
    vec3 p2 = position_worldSpace[2];
    vec3 p3 = position_worldSpace[3];
    
    gl_TessLevelOuter[0] = getTessLevel(distance((p0 + p1) / 2.0, U(cameraPosition)));
    gl_TessLevelOuter[3] = getTessLevel(distance((p1 + p2) / 2.0, U(cameraPosition)));
    gl_TessLevelOuter[2] = getTessLevel(distance((p2 + p3) / 2.0, U(cameraPosition)));
    gl_TessLevelOuter[1] = getTessLevel(distance((p3 + p0) / 2.0, U(cameraPosition)));
    
    gl_TessLevelInner[0] = dot(vec4(gl_TessLevelOuter[0], gl_TessLevelOuter[1], gl_TessLevelOuter[2], gl_TessLevelOuter[3]), vec4(0.25));
    gl_TessLevelInner[1] = gl_TessLevelInner[0];

    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}
