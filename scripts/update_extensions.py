#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os

extensions = os.listdir("../include/extensions")

try:
    extensions.remove("extensions.h")
except ValueError:
    pass

output = open("../src/extensions/extensions.cpp", "w")

output.write("""//Generated by update_extensions.py. Do not edit. Edit update_extensions.py instead
#include "memory.h"

""")

for extension in extensions:
    output.write("extern void *init_%s();\nextern void deinit_%s(void *ext);\n" % (extension, extension))

output.write("\nstruct Extensions\n{\n")

for extension in extensions:
    output.write("    void *%s;\n" % (extension))

output.write("};\n")

output.write("""
void *initExtensions()
{
    Extensions *ext = NEW(Extensions);
""")

for extension in extensions:
    output.write("    ((Extensions *)ext)->%s = init_%s();\n" % (extension, extension))

output.write("    return ext;\n}\n\nvoid deinitExtensions(void *ext)\n{\n")

for extension in extensions:
    output.write("    deinit_%s(((Extensions *)ext)->%s);\n" % (extension, extension))

output.write("    DELETE((Extensions *)ext);\n}\n\n")

for extension in extensions:
    output.write("void *get_%s(void *exts)\n{\n    return ((Extensions *)exts)->%s;\n}\n\n" % (extension, extension))

output = open("../include/extensions/extensions.h", "w")

output.write("""#ifndef EXTENSIONS_H
#define EXTENSIONS_H

void *initExtensions();
void deinitExtensions(void *ext);

""")

for extension in extensions:
    output.write("void *get_%s(void *exts);\n" % (extension))

output.write("#endif // EXTENSIONS_H\n")
